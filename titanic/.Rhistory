?grid.bitmap
?readPNG
boy<-c(113,49,18,8)
girl<-c(136,58,14,4)
df<-rbind(boy,girl)
df<-data.frame(df)
names(df)<-c('0','1','2','3')
View(df)
?anova
?lm
?seq
?rep
rep(0,4)
boy<-c(rep(0,113),rep(1,49),rep(2,18),rep(3,8))
girl<-c(rep(0,136),rep(1,58),rep(2,14),rep(3,4))
boy<-data.frame(boy)
boy$Gender<='Boy'
boy$Gender<-'Boy'
girl<-data.frame(girl)
girl$Gender<-'Girl'
df<-rbind(boy,girl)
names(boy)[1]<-'Resit'
names(girl)[1]<-'Resit'
df<-rbind(boy,girl)
head(df)
?t.test
anova(lm(Resit~Gender,data=df))
t.test(df)
t.test(df[1])
boy<-boy[,1]
girl<-girl[,1]
t.test(boy,girl)
?var
var(boy)
var(girl)
var(c(boy,girl))
var(c(boy,girl))**0.5
(mean(boy)-mean(girl))/var(c(boy,girl))**0.5
df=399
mu1<-mean(boy)
mu2<-mean(girl)
s<-var(c(boy,girl))/df
s<-s**0.5
s
(mu1-mu2)/s
t.test
?t.test
qt(3.05)
?qt
qt(3.05,399)
pt(3.05,399)
1-pt(3.05,399)
var1<-var(boy)
var2<-var(girl)
n1<-length(boy)
n2M-length(girl)
n2<-length(girl)
varp<-(n1*var1+n2*var2)/(n1+n2-1)
sigma<-varp**0.5
(mu1-mu2)/sigma
pt(0.1529,399)
t.test(boy,girl)
t.test(girl,boy)
pt(1.51,368)
pt(1.51,368,lower.tail=F)
?rpois
mu<-mean(c(boy,girl))
mu
ppois(0.025,mu)
ppois(0.05,mu)
ppois(0.95,mu)
ppois(0.99,mu)
qpois(0.05,mu)
qpois(0.025,mu)
qpois(0.025,mu,lower.tail=F)
qnorm(1)
pnorm(1.3)
pnorm(1.64)
qnorm(0.975)
qpois(0.975,2)
qpois(0.975,0.5)
qpois(0.05,0.5)
qpois(0.025,0.5)
all<-c(boy,girl)
rpois(5,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
rpois(6,0.5)
exp(-1)
rpois(10,1)
rnorm(10)
?rnorm
rnorm(10,0,1)
?glm
mypois<-function(k,mean) return(k**mean/factorial(k)*exp(-mean))
mypois(0,0.5)
exp(-0.5)
mypois<-function(k,mean) return(numeric(k**mean)/factorial(k)*exp(-mean))
mypois(0,0.5)
mypois<-function(k,mean) return(numeric(mean**k)/factorial(k)*exp(-mean))
mypois(0,0.5)
mypois<-function(k,mean) return((mean**k)/factorial(k)*exp(-mean))
mypois(0,0.5)
mypois(0,mu)
mypois(1,mu)
mypois(2,mu)
mypois(3,mu)
sum(mypois(1,mu),mypois(0,mu),mypois(2,mu))
sum(mypois(1,mu),mypois(0,mu),mypois(2,mu),mypos(3,mu))
sum(mypois(1,mu),mypois(0,mu),mypois(2,mu),mypois(3,mu))
?fitdistr
?fitdist
library(MASS)
library(MASS)
?fitdist
?fitdistr
fitdistr(all,'Poisson')
mean(all)
table(df$Gender,df$Resit)
Boy<-data.frame(Resit=boy,Gender='Boy')
Girl<-data.frame(Resit=girl,Gender='Girl')
df<-rbind(Boy,Girl)
x<-table(df$Gender,df$Resit)
x
y<-data.frame(x)
y
y<-data.frame(table(df$Resit))
y
fit<-fitdistr(y,'Poisson')
fit<-fitdistr(y[,2],'Poisson')
fit
mypois(0,10)
mypois(1,10)
mypois(10,10)
mypois(0,10)*100
ppois(0,-100)
rpois(4,100)
qpois(0.05,0.5)
mode(boy)
?mode
?mod
?median
qnorm(0.01)
?qnorm
qt(2.92,14)
?qt
qt(0.01,14)
pt(2.92,14)
1-pt(2.92,14)
untrained<-c(10.4,8.9,10.1,9,9.4,9.6,10,10.2,9.7)
untrained<-c(10.4,8.9,10.1,9,9.4,9.6,10,10.2)
trained<-c(9,8.3,9.5,8,9.2,8.2)
t.test(untrained,trained)
?t.test
t.test(untrained,trained,conf.level=0.99)
?chi
?qchi
?pchi
?pchi2
?pchisq
num<-c(22.6, 20.9, 25.8 ,24.3, 26.3 ,21.9 ,23.2, 22.7 ,21.3, 22.8)
var(num)
qchisq(0.99,9)
qchisq(0.01,9)
?qchisq
qchisq(0.99,9)
qchisq(0.99,9,lower.tail=F)
qchisq(0.01,11)/qchisq(0.01,8)
qchisq(0.99,11)/qchisq(0.99,8)
?qf
qf(0.01,11,8)
qf(0.01,8,11)
1/0.21
qf(0.02,8,11)
qchisq(0.99,11)/qchisq(0.99,8)*11/8
qchisq(0.99,11)/qchisq(0.99,8)*8/11
qf(0.99,8,11)
qchisq(0.99,11)/qchisq(0.99,8)
qf(0.99,11,8)
qf(0.99,11,8)/qf(0.99,8,11)
qchisq(0.99,11)/11/qchisq(0.99,8)*8
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tail(buy)
tail(sell)
tail(MA60)
tail(MA30)
Vol<-Vo(data)
Vol<-Vol/mean(Vol)*mean(price)
lines(Vol,col='yellow')
Vol<-Vol/range(Vol)*mean(price)
lines(Vol)
range(Vol)
range(Vol)
Vol<-Vo(data)
range(VOl)
range(Vol)
mean(Vol)
?range
?diff
diff(1:10, 2)
diff(1:10, 2,2)
1:10
diff(range(Vol))
Vol<-Vol/diff(range(Vol))*mean(price)
range(Vol)
plot(price,main=paste('chart for',sym))
points(buy,col='red')
points(sell,col='green')
lines(MA60,col='green')
lines(MA30,col='blue')
lines(MA5,col='red')
lines(Vol)
nrow(data)
nrow(Vol)
source('~/Dropbox/quantmod_test/buy_sell.R')
tail(buy)
tail(sell)
nrow(buy)
nrow(sell)
mean(buy)
mean(sell)
source('~/.active-rstudio-document')
tail(buy)
tail(MA30)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
tail(buy)
mean(buy)
tail(MA60)
source('~/Dropbox/quantmod_test/buy_sell.R')
tail(buy)
to
head(tail(buy,9),7)
x<-head(tail(buy,9),7)
x<-x[c(1,2,3,5)]
x
weight<-c(1,2,4,8)
x*weight
x*weight/mean(weight)
sum(x*weight)/sum(weight)
mean(x)
tail(sell,3)
source('~/Dropbox/quantmod_test/buy_sell.R')
tail(data)
tail(buy)
buy.point<-function(sym,name=NULL,period=365){
#sym<-'MU'
library(quantmod)
to<-Sys.Date()
from<-to-period
data<-getSymbols(sym,src='yahoo',from=from,to=to,auto.assign = F)
price<-Cl(data)
MA5<-SMA(price,5)
MA10<-SMA(price,10)
MA30<-SMA(price,30)
MA60<-SMA(price,60)
delta.thresh<-as.numeric(var(price)**0.05/mean(price))
lower.than.MA5<-ifelse(price<MA5,1,0)
lower.than.MA60<-ifelse(price<MA60,1,0)
#buy point: price uptrend cutting MA5 and price is under MA30
MA5.throu<-seriesDecr(lower.than.MA5)
#sell point: price uptrend cutting MA30
MA60.throu<-seriesDecr(lower.than.MA60)
buy.point<-ifelse(MA5.throu==1 & (MA30-price)/price > 0 & (MA60-price)/price > delta.thresh ,1,0)
buy<-price[buy.point==1,]
sell.point<-ifelse(MA60.throu==1,1,0)
sell<-price[sell.point==1,]
##plot
last.buy<-tail(index(buy),1)
ddl<-Sys.Date()-7
if (length(last.buy!=0)){
if (last.buy>=ddl){
png(paste0('/Users/chaoranliu/Dropbox/quantmod_test/buypoint/',name,'.png'))
plot(price,main=paste('chart for',sym,' ',name))
points(buy,col='red')
points(sell,col='green')
lines(MA60,col='green')
lines(MA30,col='blue')
lines(MA5,col='red')
#Vol<-Vo(data)
#Vol<-Vol/max(Vol)*diff(range(price))+min(price)
#lines(Vol)
dev.off()
last<-data.frame(tail(buy,1))
row.names(last)<-name
colnames(last)<-'buy price'
return (last)
}
}
}
buy.point('FXI','FXI')
library(readr)
train<-read_csv('train.csv',na.strings=c('NA',''))
?read_csv
train<-read_csv('train.csv',na=c('NA',''))
setwd("~/Dropbox/kaggle/titanic")
train<-read_csv('train.csv',na=c('NA',''))
train<-read_csv('train.csv')
test<-read_csv('test.csv')
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
aggregate(Age~Title,full,median)
full$Title[full$Title %in% c('Capt', 'Don', 'Major','Jonkheer')] <- 'Sir'
full$Title[full$Title %in% c('Dona','the Countess' )] <- 'Lady'
full$Title[full$Title %in% c('Mlle','Mme','Ms')] <- 'Miss'
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Fare
#simply replace the one missing Fare data with median, due to skewed distribution of Fare
full$Fare[is.na(full$Fare)]<-median(full$Fare,na.rm=T)
#Age
#decision tree (regression) method to predict missing Age data
library(rpart)
fit.Age<-rpart(Age[!is.na(Age)]~Pclass+Title+Sex+SibSp+Parch+Fare,data=full[!is.na(full$Age),],method='anova')
full$Age[is.na(full$Age)]<-predict(fit.Age,full[is.na(full$Age),])
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=12]<-1
#FamilyId
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=3]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
#deck.fit<-rpart(Deck~Pclass+Fare,data=full[!is.na(full$Deck),])
#full$Deck[is.na(full$Deck)]<-as.character(predict(deck.fit,full[is.na(full$Deck),],type='class'))
#full$Deck[is.na(full$Deck)]<-'UNK'
#Excat Cabin Posistion from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$CabinNum<-as.numeric(full$CabinNum)
full$CabinNum[full$CabinNum==' ']<-NA
full$CabinPos<-NA
full$CabinPos[full$CabinNum <=30]<-'Front'
full$CabinPos[full$CabinNum <=75 & full$CabinNum>30]<-'Middle'
full$CabinPos[full$CabinNum >75]<-'End'
full$CabinPos<-factor(full$CabinPos)
#side.train<-full[!is.na(full$Side),]
#side.test<-full[is.na(full$Side),]
#side.fit<-rpart(Side~FamilyId+FamilySize,side.train,method='class')
#full$Side[is.na(full$Side)]<-as.character(predict(side.fit,side.test,type='class'))
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
colnames(full)
library(caret)
control=trainControl(method='repeatedcv',number = 10,repeats=10)
fit.glm<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='glm')
fit.glm
fit.bayesglm<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='bayesglm')
fit.bayesglm
control
names(control)
varImpPlot(fit.glm)
varImp(fit.glm)
library(randomForest)
varImpPlot(fit.glm)
varImp(fit.bayesglm)
length(levels(train$FamilyId2))
length(levels(train$FamilyId))
fit.nnet<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='nnet',maxit=1000)
fit.nnet
fit.bayesglm
fit.glm
fit.glm<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,family=binomial(link='logit'),method='glm')
fit.glm
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
SmallFamily<-Family$FamilyId[Family$Freq<=3]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId3<-factor(FamilyId)
length(levels(full$FamilyId))
length(levels(full$FamilyId2))
length(levels(full$FamilyId3))
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
colnames(train)
?read.csv
fit.rpart<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='rpart')
fit.nnet<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='nnet',maxit=1000,trace=F)
fit.rpart
library(Ameila)
library(Amelaa)
library(Amelia)
missmap(train)
sapply(train,class)
print(sapply(train,class))
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
Deck=factor(Deck)
)
sapply(train,class)
train$Survived<-factor(train$Survived)
sapply(train,class)
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
FamilySize=factor(FamilySize),
SibSp=factor(SibSp),
Parch=factor(Parch,)
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
Deck=factor(Deck)
)
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
FamilySize=factor(FamilySize),
SibSp=factor(SibSp),
Parch=factor(Parch),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
Deck=factor(Deck)
)
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
sapply(train,class)
fit.rpart
fit.rpart<-train(Survived~FamilyId3+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='rpart')
fit.rf<-fit.glm<-train(Survived~FamilyId3+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='rf')
fit.cf<-train(Survived~FamilyId3+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='cforest')
fit.rf
fit.rpart
fit.cf
fit.rpart<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='rpart')
fit.rpart
plot(fit.rpart)
varImp(fit.rpart)
fit.glm
names(fit.glm)
fit.glm$bestT
fit.glm$max
fit.bayesglm
fit.nnet
plot(fit.nnet)
fit.nnet1<-nnet(Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,size = 1,decay = .1)
fit.nnet1
names(fit.nnet1)
plot(fit.nnet1)
plot.nnet(fit.nnet1)
nnet.grid<-expand.grid(size=1,decay=0.1)
fit.nnet1<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='nnet',tuneGrid = nnet.grid)
fit.nnet1
fit.nnet1$call
fit.nnet
fit.nnet1
fit.nnet$call
fit.nnet1$call
fit.glm
fit.glm$call
fit.bayesglm$call
fit.bayesglm
fit.cf
fit.cf$call
fit.glm<-train(Survived~FamilyId2+FamilySize+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child,data=train,trControl=control,method='glm',family=binomial(link='logit'))
install.packages('kernlab')
